"""
script for assigning new ACs.
Asks assigner for location of flatfile and reads the IDs, then asks for the
name of the curator that needs the AC and the purpose, returns new ACs from
the AC list and increments current AC, writes info to ASSIGNDACS file.
Kate W
"""

import argparse
import os
from datetime import date
import re

today = date.today()
date_today = today.strftime("%d/%m/%y")
user = os.getlogin()


def get_ids_from_flat_file(flat_file):
    assert os.path.exists(
        flat_file
    ), "Could NOT find the flatfile. Check the flatfile location/path is correct"
    p = re.compile(r"ID\s+([A-Za-z0-9_]+)")
    # extracts entry ID from flatfile
    ids = []
    with open(flat_file, "r") as f:
        for line in f:
            m = p.match(line)
            if m:
                ids.append(m.groups()[0])
    return ids


# finds the flatfile and extracts entry ID
def write_new_ac(flat_file, entry_id, curator, working_dir):
    flat_file_entry_ids = get_ids_from_flat_file(flat_file)
    print(flat_file_entry_ids)

    # retrieves latest AC from AC file and deletes it, incrementing next AC
    # While writing creates a temp file, then renames once writing has completed to
    # prevent the original file being destroyed if an error occurs during the write
    # def assign_info():
    os.chdir(working_dir)  # location of folder containing AC list and assigndacs
    with open("ac_list.txt", "r") as f:
        new_acs = f.read().splitlines()

    assert len(new_acs) == len(flat_file_entry_ids)

    # inform user when there are less than 10 accessions in ac_list

    # add information to end of assigndacs file
    with open("ac_datafile.txt", "a+") as f:
        # iterate over both flat_file_entry_ids and new_acs using the zip function
        f.write(f"\n{date_today} {next_ac} {entry_id} {user} {curator}")
        print(f"The assigned AC is {first_ac}")
    with open("ac_list.txt", "w") as f:
        for new_ac in new_acs:
            print(new_ac, file=f)


def get_arguments():
    """
    ac_assign.py --flatfile /foo/bar --curator "For Bob's curation work" --working_dir /desktop/reassignids
    ac_assign.py --flatfile /foo/bar --curator "For Bob's curation work" """

    parser = argparse.ArgumentParser()
    parser.add_argument("--flat_file", type=str, help="Flat file path")
    parser.add_argument(
        "--curator",
        type=str,
        help="Curator name and purpose e.g. For Bobs curation work",
    )
    parser.add_argument(
        "--working_dir",
        type=str,
        help="Location of folder containing AC list and assigndacs",
        # add default location /
    )
    return parser.parse_args()


# Define main function
def main():
    args = get_arguments()
    write_new_ac(args.flat_file, args.entry_id, args.curator, args.working_dir)


# Execute main() function
if __name__ == "__main__":
    main()
